buildscript {
    ext.kotlin_version = '1.9.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.5.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

// Task to run prepare_android.sh before build
tasks.register('prepareAndroidDependencies', Exec) {
    workingDir projectDir
    commandLine 'sh', './prepare_android.sh'
    
    onlyIf {
        def script = new File("$projectDir/prepare_android.sh")
        script.exists() && script.canExecute()
    }
    
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    ignoreExitValue true
    
    doLast {
        logger.lifecycle("Prepare script output: ${standardOutput.toString()}")
        if (executionResult.get().exitValue != 0) {
            logger.warn("Prepare script failed with exit code ${executionResult.get().exitValue}")
            logger.warn("Error output: ${errorOutput.toString()}")
        }
    }
}

// Ensure prepare runs before any build tasks
afterEvaluate {
    tasks.matching { 
        it.name.startsWith('externalNativeBuild') || 
        it.name.startsWith('generate') ||
        it.name.contains('CMake') ||
        it.name == 'preBuild'
    }.each { task ->
        task.dependsOn prepareAndroidDependencies
    }
}

android {
    namespace 'com.michaeljperri.flutter_sequencer'
    compileSdk 34
    
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                arguments "-DANDROID_STL=c++_shared",
                          "-DANDROID_ARM_NEON=TRUE",
                          "-DANDROID_TOOLCHAIN=clang"
            }
        }
        
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
    }
    
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    
    lint {
        disable 'InvalidPackage'
        abortOnError false
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }
    
    externalNativeBuild {
        cmake {
            version "3.18.1"
            path "CMakeLists.txt"
        }
    }
    
    packagingOptions {
        pickFirst 'lib/arm64-v8a/libsfizz.so'
        pickFirst 'lib/armeabi-v7a/libsfizz.so'
        pickFirst 'lib/x86_64/libsfizz.so'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}